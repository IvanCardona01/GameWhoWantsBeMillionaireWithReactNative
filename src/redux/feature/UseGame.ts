// Generated by https://quicktype.io

import { createSlice, PayloadAction } from "@reduxjs/toolkit";

export type answerState ={
    answer: 'correct' | 'void' | 'incorrect'
}

export interface UseGame {
    levelActual: number
    levelStatus: answerState[]
    money: number
    questions: Questions
}

export interface Questions {
    results: Question[];
}

export interface Question {
    question:          string;
    correct_answer:    string;
    incorrect_answers: string[];
}

const initialState: UseGame = {
    levelActual: 0,
    levelStatus: [
                    {answer:'void'},
                    {answer:'void'},
                    {answer:'void'},
                    {answer:'void'},
                    {answer: 'void'}
                ],
    money: 0,
    questions: {results: []}
}


export interface answerProps {
    answer: 'correct' | 'void' | 'incorrect'
    money: number
}

const GameSlice = createSlice({
    name:'useGame',
    initialState,
    reducers:{
        addQuestionsList: (state, action: PayloadAction<Question[]>) => {
            state.questions.results = action.payload
        },
        addAnswer: (state, action: PayloadAction<answerProps>) => {
            const { answer, money } = action.payload
            state.levelStatus[state.levelActual].answer = answer
            state.levelActual++
            if (state.money + money < 0){
                state.money = 0
            }else{
                state.money += money
            }
        },
        resetGame: (state) => {
            state.levelActual = 0
            state.levelStatus = [
                {answer:'void'},
                {answer:'void'},
                {answer:'void'},
                {answer:'void'},
                {answer: 'void'}
            ]
            state.money = 0
        }
    }
})

export const { addQuestionsList, addAnswer, resetGame } = GameSlice.actions;
export default GameSlice.reducer;